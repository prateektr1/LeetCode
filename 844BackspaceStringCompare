class Solution {
    
    static boolean isSameStack(Stack<Character> stack1,  
                            Stack<Character> stack2) 
{ 
    // Create a flag variable 
    boolean flag = true; 
        
     if(stack1.isEmpty()&&stack2.isEmpty())
        return true;
    
    if(stack1.isEmpty()&&!stack2.isEmpty())
        return false;
        
     if(!stack1.isEmpty()&&stack2.isEmpty())
        return false;
  
    // Check if size of both stacks are same 
    if (stack1.size() != stack2.size()) 
    { 
        flag = false; 
        return flag; 
    } 
  
    // Until the stacks are not empty 
    // compare top of both stacks 
    while (stack1.empty() == false) 
    { 
        // If the top elements of both stacks 
        // are same 
        if (stack1.peek() == stack2.peek()) 
        { 
            // Pop top of both stacks 
            stack1.pop(); 
            stack2.pop(); 
        } 
        else
        { 
            // Otherwise, set flag to false 
            flag = false; 
            break; 
        } 
    } 
  
    // Return flag 
    return flag; 
} 
    public boolean backspaceCompare(String S, String T) {
        
        Stack<Character> st1 = new Stack<Character>();
        Stack<Character> st2 = new Stack<Character>();
        
        for(char c: S.toCharArray())
        {
            if(c=='#')
            {
                if(!st1.isEmpty())
                st1.pop();
            }
            else
                st1.push(c);
        }
        
         for(char t: T.toCharArray())
        {
            if(t=='#')
            {
                if(!st2.isEmpty())
                st2.pop();
            }
            else
                st2.push(t);
        }

        return (isSameStack(st1,st2));
    }
}
